@if:

The @if control directive takes a SassScript expression and processes its block of styles if the expression returns anything other than false.

Here's a fairly simple example of an @if control directive. I've simplified this example to be more readable, rather than usable.

// Set a variable to run the if statement against
$boolean: true !default

=simple-mixin
  @if $boolean
    display: block
  @else
    display: none

.some-selector
  +simple-mixin

@for:

The @for directive comes in two forms.

The first option is @for $var from <start> through <end> which starts at <start> and loops "through" each iteration and ends at <end>. Pretty straight forward.

The second option is @for $var from <start> to <end> which starts at <start> and loops through each iteration "to" <end> and stops. Once the directive hits the <end> it stops the looping process and does not evaluate the loop that one last time. Using the values mentioned in the example below, it's like saying "go from 1 to 4 and then stop".

In either case, the $var can be any variable name. Because this directive is often used to increment $i is often the name you will see as the $var.

Here's a fairly simple example of a @for control directive.

$class-slug: for !default

@for $i from 1 through 4
  .#{$class-slug}-#{$i}
    width: 60px + $i

@each:

The @each directive takes the form @each $var in <list>.

As you can see in the example below, $var can be any variable name, and <list> is a SassScript expression that returns a list. When processed, $var is set to each item in the list, and processes its block of styles using that value of $var.

Here's a fairly simple example of an @each control directive.

$list: adam john wynn mason kuroir

=author-images
  @each $author in $list
    .photo-#{$author}
      background: image-url("avatars/#{$author}.png") no-repeat

.author-bio
  +author-images

@while:

The @while directive takes a SassScript expression (just like the other control directives) and repeatedly emits the nested block of styles until the statement evaluates to false. Much like the @for control directive, you are able to create very complex looping statements "while" a specific condition evaluates to true.

Here's an example of a @while control directive.

$types: 4
$type-width: 20px

@while $types > 0
  .while-#{$types}
    width: $type-width + $types
  $types: $types - 1


